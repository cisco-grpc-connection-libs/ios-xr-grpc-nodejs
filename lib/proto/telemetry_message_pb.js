/**
 * @fileoverview
 * @enhanceable
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.Telemetry', null, global);
goog.exportSymbol('proto.TelemetryField', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Telemetry = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.Telemetry.repeatedFields_, null);
};
goog.inherits(proto.Telemetry, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.Telemetry.displayName = 'proto.Telemetry';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.Telemetry.repeatedFields_ = [14];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Telemetry.prototype.toObject = function(opt_includeInstance) {
  return proto.Telemetry.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Telemetry} msg The msg instance to transform.
 * @return {!Object}
 */
proto.Telemetry.toObject = function(includeInstance, msg) {
  var f, obj = {
    collectionId: msg.getCollectionId(),
    basePath: msg.getBasePath(),
    subscriptionIdentifier: msg.getSubscriptionIdentifier(),
    modelVersion: msg.getModelVersion(),
    collectionStartTime: msg.getCollectionStartTime(),
    msgTimestamp: msg.getMsgTimestamp(),
    fieldsList: jspb.Message.toObjectList(msg.getFieldsList(),
    proto.TelemetryField.toObject, includeInstance),
    collectionEndTime: msg.getCollectionEndTime()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Telemetry}
 */
proto.Telemetry.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Telemetry;
  return proto.Telemetry.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Telemetry} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Telemetry}
 */
proto.Telemetry.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setCollectionId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setBasePath(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setSubscriptionIdentifier(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setModelVersion(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setCollectionStartTime(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setMsgTimestamp(value);
      break;
    case 14:
      var value = new proto.TelemetryField;
      reader.readMessage(value,proto.TelemetryField.deserializeBinaryFromReader);
      msg.getFieldsList().push(value);
      msg.setFieldsList(msg.getFieldsList());
      break;
    case 15:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setCollectionEndTime(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.Telemetry} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.Telemetry.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Telemetry.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.Telemetry.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getCollectionId();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = this.getBasePath();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = this.getSubscriptionIdentifier();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = this.getModelVersion();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = this.getCollectionStartTime();
  if (f !== 0) {
    writer.writeUint64(
      5,
      f
    );
  }
  f = this.getMsgTimestamp();
  if (f !== 0) {
    writer.writeUint64(
      6,
      f
    );
  }
  f = this.getFieldsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      14,
      f,
      proto.TelemetryField.serializeBinaryToWriter
    );
  }
  f = this.getCollectionEndTime();
  if (f !== 0) {
    writer.writeUint64(
      15,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.Telemetry} The clone.
 */
proto.Telemetry.prototype.cloneMessage = function() {
  return /** @type {!proto.Telemetry} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional uint64 collection_id = 1;
 * @return {number}
 */
proto.Telemetry.prototype.getCollectionId = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 1, 0));
};


/** @param {number} value  */
proto.Telemetry.prototype.setCollectionId = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string base_path = 2;
 * @return {string}
 */
proto.Telemetry.prototype.getBasePath = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 2, ""));
};


/** @param {string} value  */
proto.Telemetry.prototype.setBasePath = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional string subscription_identifier = 3;
 * @return {string}
 */
proto.Telemetry.prototype.getSubscriptionIdentifier = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 3, ""));
};


/** @param {string} value  */
proto.Telemetry.prototype.setSubscriptionIdentifier = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional string model_version = 4;
 * @return {string}
 */
proto.Telemetry.prototype.getModelVersion = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 4, ""));
};


/** @param {string} value  */
proto.Telemetry.prototype.setModelVersion = function(value) {
  jspb.Message.setField(this, 4, value);
};


/**
 * optional uint64 collection_start_time = 5;
 * @return {number}
 */
proto.Telemetry.prototype.getCollectionStartTime = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 5, 0));
};


/** @param {number} value  */
proto.Telemetry.prototype.setCollectionStartTime = function(value) {
  jspb.Message.setField(this, 5, value);
};


/**
 * optional uint64 msg_timestamp = 6;
 * @return {number}
 */
proto.Telemetry.prototype.getMsgTimestamp = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 6, 0));
};


/** @param {number} value  */
proto.Telemetry.prototype.setMsgTimestamp = function(value) {
  jspb.Message.setField(this, 6, value);
};


/**
 * repeated TelemetryField fields = 14;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.TelemetryField>}
 */
proto.Telemetry.prototype.getFieldsList = function() {
  return /** @type{!Array.<!proto.TelemetryField>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.TelemetryField, 14));
};


/** @param {Array.<!proto.TelemetryField>} value  */
proto.Telemetry.prototype.setFieldsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 14, value);
};


proto.Telemetry.prototype.clearFieldsList = function() {
  this.setFieldsList([]);
};


/**
 * optional uint64 collection_end_time = 15;
 * @return {number}
 */
proto.Telemetry.prototype.getCollectionEndTime = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 15, 0));
};


/** @param {number} value  */
proto.Telemetry.prototype.setCollectionEndTime = function(value) {
  jspb.Message.setField(this, 15, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.TelemetryField = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.TelemetryField.repeatedFields_, proto.TelemetryField.oneofGroups_);
};
goog.inherits(proto.TelemetryField, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.TelemetryField.displayName = 'proto.TelemetryField';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.TelemetryField.repeatedFields_ = [15];

/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.TelemetryField.oneofGroups_ = [[4,5,6,7,8,9,10,11,12]];

/**
 * @enum {number}
 */
proto.TelemetryField.ValueByTypeCase = {
  VALUE_BY_TYPE_NOT_SET: 0,
  BYTES_VALUE: 4,
  STRING_VALUE: 5,
  BOOL_VALUE: 6,
  UINT32_VALUE: 7,
  UINT64_VALUE: 8,
  SINT32_VALUE: 9,
  SINT64_VALUE: 10,
  DOUBLE_VALUE: 11,
  FLOAT_VALUE: 12
};

/**
 * @return {proto.TelemetryField.ValueByTypeCase}
 */
proto.TelemetryField.prototype.getValueByTypeCase = function() {
  return /** @type {proto.TelemetryField.ValueByTypeCase} */(jspb.Message.computeOneofCase(this, proto.TelemetryField.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.TelemetryField.prototype.toObject = function(opt_includeInstance) {
  return proto.TelemetryField.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.TelemetryField} msg The msg instance to transform.
 * @return {!Object}
 */
proto.TelemetryField.toObject = function(includeInstance, msg) {
  var f, obj = {
    timestamp: msg.getTimestamp(),
    name: msg.getName(),
    augmentData: msg.getAugmentData(),
    bytesValue: msg.getBytesValue_asB64(),
    stringValue: jspb.Message.getField(msg, 5),
    boolValue: jspb.Message.getField(msg, 6),
    uint32Value: jspb.Message.getField(msg, 7),
    uint64Value: jspb.Message.getField(msg, 8),
    sint32Value: jspb.Message.getField(msg, 9),
    sint64Value: jspb.Message.getField(msg, 10),
    doubleValue: jspb.Message.getOptionalFloatingPointField(msg, 11),
    floatValue: jspb.Message.getOptionalFloatingPointField(msg, 12),
    fieldsList: jspb.Message.toObjectList(msg.getFieldsList(),
    proto.TelemetryField.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.TelemetryField}
 */
proto.TelemetryField.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.TelemetryField;
  return proto.TelemetryField.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.TelemetryField} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.TelemetryField}
 */
proto.TelemetryField.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setTimestamp(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setAugmentData(value);
      break;
    case 4:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setBytesValue(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setStringValue(value);
      break;
    case 6:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setBoolValue(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setUint32Value(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setUint64Value(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readSint32());
      msg.setSint32Value(value);
      break;
    case 10:
      var value = /** @type {number} */ (reader.readSint64());
      msg.setSint64Value(value);
      break;
    case 11:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setDoubleValue(value);
      break;
    case 12:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setFloatValue(value);
      break;
    case 15:
      var value = new proto.TelemetryField;
      reader.readMessage(value,proto.TelemetryField.deserializeBinaryFromReader);
      msg.getFieldsList().push(value);
      msg.setFieldsList(msg.getFieldsList());
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.TelemetryField} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.TelemetryField.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.TelemetryField.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.TelemetryField.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getTimestamp();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = this.getName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = this.getAugmentData();
  if (f) {
    writer.writeBool(
      3,
      f
    );
  }
  f = jspb.Message.getField(this, 4);
  if (f != null) {
    writer.writeBytes(
      4,
      f
    );
  }
  f = jspb.Message.getField(this, 5);
  if (f != null) {
    writer.writeString(
      5,
      f
    );
  }
  f = jspb.Message.getField(this, 6);
  if (f != null) {
    writer.writeBool(
      6,
      f
    );
  }
  f = jspb.Message.getField(this, 7);
  if (f != null) {
    writer.writeUint32(
      7,
      f
    );
  }
  f = jspb.Message.getField(this, 8);
  if (f != null) {
    writer.writeUint64(
      8,
      f
    );
  }
  f = jspb.Message.getField(this, 9);
  if (f != null) {
    writer.writeSint32(
      9,
      f
    );
  }
  f = jspb.Message.getField(this, 10);
  if (f != null) {
    writer.writeSint64(
      10,
      f
    );
  }
  f = jspb.Message.getField(this, 11);
  if (f != null) {
    writer.writeDouble(
      11,
      f
    );
  }
  f = jspb.Message.getField(this, 12);
  if (f != null) {
    writer.writeFloat(
      12,
      f
    );
  }
  f = this.getFieldsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      15,
      f,
      proto.TelemetryField.serializeBinaryToWriter
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.TelemetryField} The clone.
 */
proto.TelemetryField.prototype.cloneMessage = function() {
  return /** @type {!proto.TelemetryField} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional uint64 timestamp = 1;
 * @return {number}
 */
proto.TelemetryField.prototype.getTimestamp = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 1, 0));
};


/** @param {number} value  */
proto.TelemetryField.prototype.setTimestamp = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string name = 2;
 * @return {string}
 */
proto.TelemetryField.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 2, ""));
};


/** @param {string} value  */
proto.TelemetryField.prototype.setName = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional bool augment_data = 3;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.TelemetryField.prototype.getAugmentData = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldProto3(this, 3, false));
};


/** @param {boolean} value  */
proto.TelemetryField.prototype.setAugmentData = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional bytes bytes_value = 4;
 * @return {(string|Uint8Array)}
 */
proto.TelemetryField.prototype.getBytesValue = function() {
  return /** @type {(string|Uint8Array)} */ (!this.hasBytesValue() ? "" : jspb.Message.getField(this, 4));
};


/**
 * optional bytes bytes_value = 4;
 * This is a type-conversion wrapper around `getBytesValue()`
 * @return {string}
 */
proto.TelemetryField.prototype.getBytesValue_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getBytesValue()));
};


/**
 * optional bytes bytes_value = 4;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getBytesValue()`
 * @return {Uint8Array}
 */
proto.TelemetryField.prototype.getBytesValue_asU8 = function() {
  return /** @type {Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getBytesValue()));
};


/** @param {(string|Uint8Array)|undefined} value  */
proto.TelemetryField.prototype.setBytesValue = function(value) {
  jspb.Message.setOneofField(this, 4, proto.TelemetryField.oneofGroups_[0], value);
};


proto.TelemetryField.prototype.clearBytesValue = function() {
  jspb.Message.setOneofField(this, 4, proto.TelemetryField.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.TelemetryField.prototype.hasBytesValue = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional string string_value = 5;
 * @return {string}
 */
proto.TelemetryField.prototype.getStringValue = function() {
  return /** @type {string} */ (!this.hasStringValue() ? "" : jspb.Message.getField(this, 5));
};


/** @param {string?|undefined} value  */
proto.TelemetryField.prototype.setStringValue = function(value) {
  jspb.Message.setOneofField(this, 5, proto.TelemetryField.oneofGroups_[0], value);
};


proto.TelemetryField.prototype.clearStringValue = function() {
  jspb.Message.setOneofField(this, 5, proto.TelemetryField.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.TelemetryField.prototype.hasStringValue = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional bool bool_value = 6;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.TelemetryField.prototype.getBoolValue = function() {
  return /** @type {boolean} */ (!this.hasBoolValue() ? false : jspb.Message.getField(this, 6));
};


/** @param {boolean?|undefined} value  */
proto.TelemetryField.prototype.setBoolValue = function(value) {
  jspb.Message.setOneofField(this, 6, proto.TelemetryField.oneofGroups_[0], value);
};


proto.TelemetryField.prototype.clearBoolValue = function() {
  jspb.Message.setOneofField(this, 6, proto.TelemetryField.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.TelemetryField.prototype.hasBoolValue = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional uint32 uint32_value = 7;
 * @return {number}
 */
proto.TelemetryField.prototype.getUint32Value = function() {
  return /** @type {number} */ (!this.hasUint32Value() ? 0 : jspb.Message.getField(this, 7));
};


/** @param {number?|undefined} value  */
proto.TelemetryField.prototype.setUint32Value = function(value) {
  jspb.Message.setOneofField(this, 7, proto.TelemetryField.oneofGroups_[0], value);
};


proto.TelemetryField.prototype.clearUint32Value = function() {
  jspb.Message.setOneofField(this, 7, proto.TelemetryField.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.TelemetryField.prototype.hasUint32Value = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional uint64 uint64_value = 8;
 * @return {number}
 */
proto.TelemetryField.prototype.getUint64Value = function() {
  return /** @type {number} */ (!this.hasUint64Value() ? 0 : jspb.Message.getField(this, 8));
};


/** @param {number?|undefined} value  */
proto.TelemetryField.prototype.setUint64Value = function(value) {
  jspb.Message.setOneofField(this, 8, proto.TelemetryField.oneofGroups_[0], value);
};


proto.TelemetryField.prototype.clearUint64Value = function() {
  jspb.Message.setOneofField(this, 8, proto.TelemetryField.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.TelemetryField.prototype.hasUint64Value = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional sint32 sint32_value = 9;
 * @return {number}
 */
proto.TelemetryField.prototype.getSint32Value = function() {
  return /** @type {number} */ (!this.hasSint32Value() ? 0 : jspb.Message.getField(this, 9));
};


/** @param {number?|undefined} value  */
proto.TelemetryField.prototype.setSint32Value = function(value) {
  jspb.Message.setOneofField(this, 9, proto.TelemetryField.oneofGroups_[0], value);
};


proto.TelemetryField.prototype.clearSint32Value = function() {
  jspb.Message.setOneofField(this, 9, proto.TelemetryField.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.TelemetryField.prototype.hasSint32Value = function() {
  return jspb.Message.getField(this, 9) != null;
};


/**
 * optional sint64 sint64_value = 10;
 * @return {number}
 */
proto.TelemetryField.prototype.getSint64Value = function() {
  return /** @type {number} */ (!this.hasSint64Value() ? 0 : jspb.Message.getField(this, 10));
};


/** @param {number?|undefined} value  */
proto.TelemetryField.prototype.setSint64Value = function(value) {
  jspb.Message.setOneofField(this, 10, proto.TelemetryField.oneofGroups_[0], value);
};


proto.TelemetryField.prototype.clearSint64Value = function() {
  jspb.Message.setOneofField(this, 10, proto.TelemetryField.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.TelemetryField.prototype.hasSint64Value = function() {
  return jspb.Message.getField(this, 10) != null;
};


/**
 * optional double double_value = 11;
 * @return {number}
 */
proto.TelemetryField.prototype.getDoubleValue = function() {
  return /** @type {number} */ (!this.hasDoubleValue() ? 0.0 : +jspb.Message.getField(this, 11));
};


/** @param {number?|undefined} value  */
proto.TelemetryField.prototype.setDoubleValue = function(value) {
  jspb.Message.setOneofField(this, 11, proto.TelemetryField.oneofGroups_[0], value);
};


proto.TelemetryField.prototype.clearDoubleValue = function() {
  jspb.Message.setOneofField(this, 11, proto.TelemetryField.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.TelemetryField.prototype.hasDoubleValue = function() {
  return jspb.Message.getField(this, 11) != null;
};


/**
 * optional float float_value = 12;
 * @return {number}
 */
proto.TelemetryField.prototype.getFloatValue = function() {
  return /** @type {number} */ (!this.hasFloatValue() ? 0.0 : +jspb.Message.getField(this, 12));
};


/** @param {number?|undefined} value  */
proto.TelemetryField.prototype.setFloatValue = function(value) {
  jspb.Message.setOneofField(this, 12, proto.TelemetryField.oneofGroups_[0], value);
};


proto.TelemetryField.prototype.clearFloatValue = function() {
  jspb.Message.setOneofField(this, 12, proto.TelemetryField.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.TelemetryField.prototype.hasFloatValue = function() {
  return jspb.Message.getField(this, 12) != null;
};


/**
 * repeated TelemetryField fields = 15;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.TelemetryField>}
 */
proto.TelemetryField.prototype.getFieldsList = function() {
  return /** @type{!Array.<!proto.TelemetryField>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.TelemetryField, 15));
};


/** @param {Array.<!proto.TelemetryField>} value  */
proto.TelemetryField.prototype.setFieldsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 15, value);
};


proto.TelemetryField.prototype.clearFieldsList = function() {
  this.setFieldsList([]);
};


goog.object.extend(exports, proto);
